# genotyping rnaseq reads 

#copy files from GBR_rnaseq to new directory

cp *.fq.trim ../RNAseq_GATK

ls *.trim | wc -l

#60 

#concatenate replicates 

cat o0*fq.trim > o0.fq.trim
cat o1[abc].fq.trim > o1.fq.trim
cat o10*.fq.trim > o10.fq.trim
cat o2*.fq.trim > o2.fq.trim
cat o3*.fq.trim > o3.fq.trim
cat o4*.fq.trim > o4.fq.trim
cat o6*.fq.trim > o6.fq.trim 
cat o7*.fq.trim > o7.fq.trim 
cat o8*.fq.trim > o8.fq.trim 
cat o9*.fq.trim > o9.fq.trim 
cat oM1*.fq.trim > oM1.fq.trim 
cat w22*.fq.trim > w22.fq.trim 
cat w23*.fq.trim > w23.fq.trim 
cat w24*.fq.trim > w24.fq.trim
cat w25*.fq.trim > w25.fq.trim 
cat w26*.fq.trim > w26.fq.trim 
cat w27*.fq.trim > w27.fq.trim
cat w28*.fq.trim > w28.fq.trim
cat w30*.fq.trim > w30.fq.trim
cat w31*.fq.trim > w31.fq.trim  

mv *[abc].fq.trim uncat_files

ls *.fq.trim | wc -l

20


### MAPPING ###

#map reads with Bowtie2 to A. millepora genome 

# aligning with bowtie2 :
module load bowtie/2.1.0
export GENOME_REF=$WORK/db/amil_genome_fold_c_cc.fasta
2bRAD_bowtie2_launch.pl '\.trim$' $GENOME_REF > bt2
ls5_launcher_creator.py -j bt2 -n maps -l bt2.job -t 3:00:00 -q normal
# calculate the max possible number of cores reasonable: ceiling(Nsamples/wayness)*12  
cat bt2.job | perl -pe 's/12way \d+/4way 96/' > bt2l.job
qsub bt2l.job

ls *.bt2.sam > sams
cat sams | wc -l  
#32

# making bam files
export GENOME_REF=$WORK/db/amil_genome_fold_c_cc.fasta
module load picard
module load samtools
module load jdk64
cat sams | perl -pe 's/(\S+)\.sam/samtools import \$GENOME_REF $1\.sam $1\.unsorted\.bam && samtools sort $1\.unsorted\.bam $1\.sorted && java -Xmx5g -jar \$TACC_PICARD_DIR\/AddOrReplaceReadGroups\.jar INPUT=$1\.sorted\.bam OUTPUT=$1\.bam RGID=group1 RGLB=lib1 RGPL=illumina RGPU=unit1 RGSM=$1 && samtools index $1\.bam/' >s2b


ls5_launcher_creator.py -j s2b -n s2b -l s2b.job -q normal
cat s2b.job | perl -pe 's/12way \d+/4way 96/' > sam2bam.job # REPLACE NNN WITH 12*ceiling([number of sam files]/4)
qsub sam2bam.job

rm *sorted*
ls *bt2.bam > bams
cat bams | wc -l  

###############################################################################

### angsd genotyping - initial quality check 
# entering interactive session, giving all node's memory to one process:
idev -tpn 1 -N 1

export GENOME_REF=$WORK/new_millepora/Amil_v1.0/Amil_ref.fa

# angsd settings:
# -minMapQ 20 : only highly unique mappings (prob of erroneous mapping = 1%)\
# -baq 1 : realign around indels (not terribly relevant for 2bRAD reads mapped with --local option) \
# -maxDepth : highest total depth (sum over all samples) to assess; set to 10x number of samples \

FILTERS="-uniqueOnly 1 -remove_bads 1 -minMapQ 20 -baq 1 -ref $GENOME_REF -maxDepth 2930" 

TODO="-doQsDist 1 -doDepth 1 -doCounts 1 -dumpCounts 2"

# in the following line, -r argument is one chromosome or contig to work with (no need to do this for whole genome as long as the chosen chromosome or contig is long enough)\
# (look up lengths of your contigs in the header of *.sam files if you need)
# bams is a file with a list of your bam files 

angsd -b bams -r Sc0000000 -GL 1 $FILTERS $TODO -P 12 -out dd 

type quit when done 
module load Rstats/3.4.0 

# summarizing results (using modified script by Matteo Fumagalli)
Rscript ~/bin/plotQC.R dd  
cat dd.info 
# scp dd.pdf to laptop to see distribution of base quality scores and fraction of sites in each sample depending on coverage threshold


#### genotype with ANGSD #### 

#--------------- population structure (based on common polymorphisms)

# F I L T E R S :
# (ALWAYS record your filter settings and explore different combinations to confirm that results are robust. )
# Suggested filters :
# -minMapQ 20 : only highly unique mappings (prob of erroneous mapping = 1%)
# -minQ 30 : only highly confident base calls
# -minInd 50 : the site must be genotyped in at least 50 individuals (note: set this to ~ 80% of your total number of your individuals)
# -minIndDepth 6 : depth of at least 6 in non-missing individual
# -snp_pval 1e-3 : high confidence that the SNP is not just sequencing error 
# -minMaf 0.05 : only common SNPs, with allele frequency 0.05 or more.
# Note: the last two filters are very efficient against sequencing errors but introduce bias against true rare alleles. It is OK (and even desirable) - UNLESS we want to do AFS analysis. We will generate data for AFS analysis in the next part.\
# also adding  filters against very badly non-HWE sites (such as, all calls are heterozygotes => lumped paralog situation) and sites with really bad strand bias:\

FILTERS="-uniqueOnly 1 -remove_bads 1 -minMapQ 20 -minQ 30 -baq 1 -dosnpstat 1 -doHWE 1 -hwe_pval 1e-5 -sb_pval 1e-5 -minInd 220 -minIndDepth 6 -snp_pval 1e-5 -minMaf 0.05"

# T O   D O : \
# -GL 1 : samtools likelihood model\
# -doGlf 2 : output beagle format (for admixture)\
# -doGeno 32 : binary genotype likelihoods format (for ngsCovar => PCA)\
# -doMajorMinor 4 -ref $GENOME_REF : infer major and minor alleles from reference (in our case it is outgroup taxon)\
# -makeMatrix 1 -doIBS 1 -doCov 1 : identity-by-state and covariance matrices based on single-read resampling (robust to variation in coverage across samples)\
# TO-DO commands can be changed to generate different files needed for different analyses as well (http://www.popgen.dk/angsd/index.php/ANGSD#Overview) 

export GENOME_REF=$WORK/new_millepora/Amil_v1.0/Amil_ref.fa

TODO="-doMajorMinor 1 -ref $GENOME_REF -doMaf 1 -doCounts 1 -makeMatrix 1 -doIBS 1 -doCov 1 -doGeno 32 -doPost 1 -doGlf 2"

# Starting angsd with -P the number fo parallel processes. Funny but in many cases angsd runs faster on -P 1
echo "angsd -b bams -GL 1 $FILTERS $TODO -P 24 -out Yap" > a.struct
ls5_launcher_creator.py -j a.struct -n a.struct -l struct -t 4:00:00 -q normal -w 1 -a tagmap
sbatch struct

#----------------------
# ADMIXTURE\

NSITES=`zcat Yap.beagle.gz | wc -l`
echo $NSITES
for K in 2 3 4; 
do 
NGSadmix -likes Yap.beagle.gz -K $K -P 10 -o admix;
done

# making a tab delimited table of bams : population correspondence
cat bams | perl -pe 's/(.)(.+)/$1$2\\t$1/' >inds2pops

#----------------------
#USE angsd_ibs_pca.R to plot pca using the .ibs file generated above 
# scp *Mat, *covar, *qopt, inds2pops, bams files to laptop, use angsd_ibs_pca.R to plot PCA and admixturePlotting_v4.R to plot ADMIXTURE


#### angsd - relatedness + inbreeding  ##########

# be sure to change -minInd 
# remove any clones from your data or relatedness estimates will not be accurate 
# need a *.glf file in order to run ngsRelate 

FILTERS="-uniqueOnly 1 -remove_bads 1 -skipTriallelic 1 -minMapQ 20 -minQ 25 -dosnpstat 1 -doHWE 1 -sb_pval 1e-5 -hetbias_pval 1e-5 -minInd 229 -snp_pval 1e-5 -minMaf 0.05"
TODO="-doMajorMinor 1 -doMaf 1 -doCounts 1 -makeMatrix 1 -doIBS 1 -doCov 1 -doGlf 3"
echo "angsd -b bams -GL 1 $FILTERS $TODO -P 1 -out Yap_noClone" > a4
ls5_launcher_creator.py -j a4 -n a4 -t 2:00:00 -e sbarfield@utexas.edu -w 1 -a tagmap
sbatch a4.slurm

#install new version of ngsRelate -- https://github.com/ANGSD/NgsRelate
# output includes both pairwise relatedness (rab) and the inbreeding coefficient 

zcat Yap_noClone.mafs.gz | cut -f5 |sed 1d >freq
NIND=`cat bams.noClone | wc -l`
echo "ngsRelate -f freq -g Yap_noClone.glf.gz -n $NIND -z bams.noClone" >relatedness
ls5_launcher_creator.py -j relatedness -n relatedness -t 2:00:00 -e sbarfield@utexas.edu -w 1 -a tagmap 



####### Fst, theta values ##### 


export GENOME_REF=$WORK/Amil_v2.00/Amil.v2.00.chrs.fasta

# per each population, generate saf.idx file 

#ST_J 
FILTERS="-uniqueOnly 1 -remove_bads 1 -minMapQ 30 -minQ 30 -minInd 38 -dosnpstat 1 -doHWE 1 -hwe_pval 1e-5 -sb_pval 1e-5 -hetbias_pval 1e-5"
TODO="-doSaf 1 -doMajorMinor 1"
echo "angsd -b ST_J -GL 1 -anc $GENOME_REF -nInd 48 $FILTERS $TODO -P 1 -out STJ_freq" > freq
ls5_launcher_creator.py -j freq -n freq -l allele_freq -t 2:00:00 -w 1 -A tagmap 
sbatch allele_freq


#ST_A  
FILTERS="-uniqueOnly 1 -remove_bads 1 -minMapQ 30 -minQ 30 -minInd 27 -dosnpstat 1 -doHWE 1 -hwe_pval 1e-5 -sb_pval 1e-5 -hetbias_pval 1e-5"
TODO="-doSaf 1 -doMajorMinor 1"
echo "angsd -b ST_A -GL 1 -anc $GENOME_REF -nInd 34 $FILTERS $TODO -P 1 -out STA_freq" > freq2
ls5_launcher_creator.py -j freq2 -n freq2 -l allele_freq2 -t 2:00:00 -w 1 -A tagmap 
sbatch allele_freq2

#calculate the 2dsfs prior 

echo "realSFS STA_freq.saf.idx STA_freq.saf.idx > ST_AJ.ml" > sfs 
ls5_launcher_creator.py -j sfs -n sfs -l sfs_1 -t 1:00:00 -w 1 -A tagmap 


#####	prepare the fst for easy window analysis etc 	#########

echo "realSFS fst index STJ_freq.saf.idx STA_freq.saf.idx -sfs ST.ml -fstout SThere" > here
ls5_launcher_creator.py -j here -n here -l hereST -t 1:00:00 -w 1 -A tagmap 


#####    getting the global Fst estimate    #######

realSFS fst stats SThere.fst.idx



#### calculating theta #### 

echo "realSFS STJ_freq_fold.saf.idx > stj.sfs" > sfs
ls5_launcher_creator.py -j sfs -n sfs -l sfs_job -t 1:00:00 -w 1 -A tagmap 

echo "realSFS STA_freq_fold.saf.idx > sta.sfs" > sfs
ls5_launcher_creator.py -j sfs -n sfs -l sfs_job -t 1:00:00 -w 1 -A tagmap 


## if your reference genome is not the same as your study species, then use -anc for the genome ref 

TODO="-doSaf 1 -doThetas 1 -fold 1" 
echo "angsd -b ST_J -out STJ_theta -pest stj.sfs -anc $GENOME_REF $TODO -GL 1"> theta
ls5_launcher_creator.py -j theta -n theta -l thetajob -t 1:00:00 -w 1 -A tagmap 

TODO="-doSaf 1 -doThetas 1 -fold 1" 
echo "angsd -b ST_A -out STA_theta -pest sta.sfs -anc $GENOME_REF $TODO -GL 1"> theta
ls5_launcher_creator.py -j theta -n theta -l thetajob -t 1:00:00 -w 1 -A tagmap 

 
#global theta estimate for every Chromosome/scaffold
#thetaStat is an angsd subprogram, so it should be installed already with angsd 

thetaStat do_stat STA_theta.thetas.idx

## sliding window analysis of theta with 50000 kb window with 10000 kb step size if interested in regions of high/low diversity

thetaStat do_stat STJ_theta.thetas.idx -win 50000 -step 10000  -outnames STJ.theta
thetaStat do_stat STA_theta.thetas.idx -win 50000 -step 10000  -outnames STA.theta



























